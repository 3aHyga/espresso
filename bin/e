#!/usr/bin/env ruby
require 'fileutils'

INDENTATION = (" " * 2).freeze

espresso_root = File.expand_path('../..', __FILE__) + '/'
src_root = espresso_root + 'app/'

$:.unshift espresso_root + 'lib'
require 'e'

def dst_path path = '.'
  dst_root = File.expand_path(path, Dir.pwd) + '/'
  [:controllers, :models, :views].inject({:root => dst_root}) do |map,p|
    map.merge p => File.join(dst_root, 'app', p.to_s, '')
  end
end

def fail msg
  puts msg
  exit 1
end

def putm msg = ''
  puts msg
end

def validate_constant_name constant
  constant =~ /\W/      && fail("Wrong constant name - %s, it should contain only alphanumerics" % constant)
  constant =~ /\A[0-9]/ && fail("Wrong constant name - %s, it should start with a letter" % constant)
  constant =~ /\A[A-Z]/ || fail("Wrong constant name - %s, it should start with a uppercase letter" % constant)
  constant
end

def validate_action_name action
  action =~ /\W/ && fail("Action names may contain only alphanumerics")
  action
end

def in_app_folder?
  File.exists?(dst_path[:controllers]) ||
    fail("Current folder does not seem to contain a Espresso application")
end

def controller_source_code name
  namespace = name.split('::').map {|c| validate_constant_name c}
  ctrl_name = namespace.pop
  before, after = [], []
  namespace.each do |c|
    i = INDENTATION * before.size
    before << "#{i}module %s" % c
    after  << "#{i}end"
  end
  [before, ctrl_name, after.reverse << ""]
end

if op = $*[0]
  if op =~ /\Ag\:/
    if op =~ /p/ # generating new project
      name = $*[1].to_s
      name.empty? && fail("Please provide project name via second argument")
      name =~ /\.\.|\// && fail("Project name can not contain slashes nor ..")

      project_path = dst_path(name)
      File.exists?(project_path[:root]) && fail("#{name} already exists")

      putm "Generating \"#{name}\" project...\n"

      folders, files = Dir[src_root + '**/*'].partition do |entry|
        File.directory?(entry)
      end

      FileUtils.mkdir(project_path[:root])
      putm "  #{name}/"
      folders.each do |folder|
        path = folder.sub(src_root, '')
        putm "  `- #{path}"
        FileUtils.mkdir(project_path[:root] + path)
      end

      files.each do |file|
        path = file.sub(src_root, '')
        putm "  Writing #{path}"
        FileUtils.cp(file, project_path[:root] + path)
      end

      exit 0
    else
      if op =~ /c/ # generating new controller
        
        in_app_folder?
        project_path = dst_path

        name  = $*[1].to_s
        route = $*[2]
        name.empty? && fail("Please provide controller name via second argument")
        before, ctrl_name, after = controller_source_code(name)

        source_code, i = [], INDENTATION * before.size
        before.each {|s| source_code << s}
        source_code << "#{i}class #{ctrl_name} < E"
        source_code << "#{i + INDENTATION}map '#{route}'" if route
        source_code << "#{i}end"
        after.each  {|s| source_code << s}
        source_code = source_code.join("\n")
        
        path = project_path[:controllers] + EspressoUtils.class_name_to_route(name)
        File.exists?(path) && fail("%s controller already exists" % name)
        putm
        putm "Creating #{path.sub(project_path[:root], '')}/"
        FileUtils.mkdir(path)
        file = path + '.rb'
        putm "Writing  #{file.sub(project_path[:root], '')}"
        putm source_code
        putm
        File.open(file, 'w') {|f| f << source_code}

        exit 0
      end

      if op =~ /r/ # generating new route
        in_app_folder?
        project_path = dst_path
        
        ctrl_name = $*[1].to_s
        ctrl_name.empty? && fail("Please provide controller name")

        ctrl_path = project_path[:controllers] +
          EspressoUtils.class_name_to_route(ctrl_name) + '/'
        File.directory?(ctrl_path) ||
          fail("#{ctrl_name} does not exists. Please create it first")

        name = $*[2].to_s
        name.empty? && fail("Please provide route name via second argument")
        path_rules = EspressoConstants::E__PATH_RULES.inject({}) do |map,(r,s)|
          map.merge /#{Regexp.escape s}/ => r.source
        end
        action = EspressoUtils.action_name_to_route(name, path_rules)
        validate_action_name(action)

        file = ctrl_path + action + '.rb'
        File.exists?(file) && fail("#{name} action already exists")

        before, ctrl_name, after = controller_source_code(ctrl_name)

        source_code, i = [], '  ' * before.size
        before.each {|s| source_code << s}
        source_code << "#{i}class #{ctrl_name}"
        ["def #{action}", "", "end"].each do |line|
          source_code << (i + INDENTATION + line)
        end
        source_code << "#{i}end"
        after.each  {|s| source_code << s}
        source_code = source_code.join("\n")

        putm "Writing #{file.sub(project_path[:root], '')}"
        putm source_code
        File.open(file, 'w') {|f| f << source_code}

        exit 0
      end
    end
  end
end

require "rack"
Rack::Server.start
