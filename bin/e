#!/usr/bin/env ruby
require 'fileutils'

$:.unshift File.expand_path('../../lib', __FILE__)
require 'e'
require 'e-more/generator'

if $*.empty?
  Rack::Server.start
  # exiting when server stopped/killed
  exit 0
end

operation = $*[0]
if operation =~ /\Ag/i
  unit = operation.sub(/\Ag\W?/i, '')
  generator = EspressoGenerator.new(Dir.pwd)
  args, setups, string_setups = generator.parse_input(*$*[1..-1])

  if args
    if unit =~ /\Ap/i
      # generating project
      if generator.generate_project(args[0], setups)
        # generating Index controller
        puts %x[cd "#{generator.dst_root + args[0]}" && e g:c Index]
      end
    else
      generator.in_app_folder?
      require generator.boot_file

      if unit =~ /\Ac/i
        if unit =~ /s\Z/i # generate multiple controllers
          args.each {|u| puts %x["#{$0}" g:c #{u} #{string_setups}]}
        else
          # generating controller
          if generator.generate_controller(args[0], setups)
            # generating index route
            puts %x["#{$0}" g:r #{args[0]} index]
          end
        end
      end

      if unit =~ /\Ar/i
        if unit =~ /s\Z/i # generate multiple routes
          args[1..-1].each {|u| puts %x["#{$0}" g:r #{args[0]} #{u} #{string_setups}]}
        else
          if generator.generate_route(args[0], args[1], args[2..-1], setups)
            puts %x["#{$0}" g:v #{args[0]} #{args[1]}]
          end
        end
      end

      if unit =~ /\Av/i
        generator.generate_view(args[0], args[1])
      end

      if unit =~ /\Am/i
        if unit =~ /s\Z/i # generate multiple models
          args.each {|u| puts %x["#{$0}" g:m #{u} #{string_setups}]}
        else
          generator.generate_model(args[0], setups)
        end
      end

    end
  end
end
