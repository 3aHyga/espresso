#!/usr/bin/env ruby
require 'fileutils'

espresso_root = File.expand_path('../..', __FILE__) + '/'
src_root = espresso_root + 'app/'

$:.unshift espresso_root + 'lib'
require 'e'

def dst_path path = '.'
  dst_root = File.expand_path(path, Dir.pwd) + '/'
  [:controllers, :models, :views].inject({:root => dst_root}) do |map,p|
    map.merge p => File.join(dst_root, 'app', p.to_s, '')
  end
end

def fail msg
  puts msg
  exit 1
end

def putm msg = ''
  puts msg
end

def validate_constant_name constant
  constant =~ /\W/      && fail("Wrong constant name - %s, it should contain only alphanumerics" % constant)
  constant =~ /\A[0-9]/ && fail("Wrong constant name - %s, it should start with a letter" % constant)
  constant =~ /\A[A-Z]/ || fail("Wrong constant name - %s, it should start with a uppercase letter" % constant)
  constant
end

def in_app_folder?
  File.exists?(dst_path[:controllers]) ||
    fail("Current folder does not seem to contain a Espresso application")
end

if op = $*[0]
  if op =~ /\Ag\:/
    if op =~ /p/ # generating new project
      name = $*[1].to_s
      name.empty? && fail("Please provide project name via second argument")
      name =~ /\.\.|\// && fail("Project name can not contain slashes nor ..")

      project_path = dst_path(name)
      File.exists?(project_path[:root]) && fail("#{name} already exists")

      putm "Generating \"#{name}\" project...\n"

      folders, files = Dir[src_root + '**/*'].partition do |entry|
        File.directory?(entry)
      end

      FileUtils.mkdir(project_path[:root])
      putm "  #{name}/"
      folders.each do |folder|
        path = folder.sub(src_root, '')
        putm "  `- #{path}"
        FileUtils.mkdir(project_path[:root] + path)
      end

      files.each do |file|
        path = file.sub(src_root, '')
        putm "  Writing #{path}"
        FileUtils.cp(file, project_path[:root] + path)
      end

      exit 0
    else
      if op =~ /c/ # generating new controller
        
        in_app_folder?
        project_path = dst_path

        name  = $*[1].to_s
        route = $*[2]
        name.empty? && fail("Please provide controller name via second argument")
        namespace = name.split('::').map {|c| validate_constant_name c}
        ctrl_name = namespace.pop
        a,z = [], []
        namespace.each do |c|
          i = '  '*a.size
          a << "#{i}module %s\n" % c
          z << "#{i}end\n"
        end
        c, i = '', '  '*a.size
        a.each {|s| c << s}
        c << "#{i}class %s < E\n" % ctrl_name
        c << "#{i}  map '%s'\n" % route if route
        c << "#{i}end\n"
        z.reverse.each {|s| c << s}
        
        path = project_path[:controllers] + EspressoUtils.class_name_to_route(name)
        File.exists?(path) && fail("%s controller already exists" % name)
        putm
        putm "Creating #{path.sub(project_path[:root], '')}/"
        FileUtils.mkdir(path)
        file = path + '.rb'
        putm "Writing  #{file.sub(project_path[:root], '')}"
        putm
        File.open(file, 'w') {|f| f << c}
        exit 0
      end

      if op =~ /r/ # generating new route
        in_app_folder?
        project_path = dst_path

      end
    end
  end
end

require "rack"
Rack::Server.start
